// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Entered extends ethereum.Event {
  get params(): Entered__Params {
    return new Entered__Params(this);
  }
}

export class Entered__Params {
  _event: Entered;

  constructor(event: Entered) {
    this._event = event;
  }

  get _sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _bucketId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _valueEntered(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _buyerReferralReward(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _referrer(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get _referrerReferralReward(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Exited extends ethereum.Event {
  get params(): Exited__Params {
    return new Exited__Params(this);
  }
}

export class Exited__Params {
  _event: Exited;

  constructor(event: Exited) {
    this._event = event;
  }

  get _bucketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokensExited(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BucketSale__buysResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class BucketSale extends ethereum.SmartContract {
  static bind(address: Address): BucketSale {
    return new BucketSale("BucketSale", address);
  }

  bucketCount(): BigInt {
    let result = super.call("bucketCount", "bucketCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bucketCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bucketCount", "bucketCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bucketPeriod(): BigInt {
    let result = super.call("bucketPeriod", "bucketPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bucketPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bucketPeriod", "bucketPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bucketSupply(): BigInt {
    let result = super.call("bucketSupply", "bucketSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bucketSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bucketSupply", "bucketSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buckets(param0: BigInt): BigInt {
    let result = super.call("buckets", "buckets(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_buckets(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("buckets", "buckets(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyerReferralRewardPerc(): BigInt {
    let result = super.call(
      "buyerReferralRewardPerc",
      "buyerReferralRewardPerc():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_buyerReferralRewardPerc(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyerReferralRewardPerc",
      "buyerReferralRewardPerc():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buys(param0: BigInt, param1: Address): BucketSale__buysResult {
    let result = super.call("buys", "buys(uint256,address):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return new BucketSale__buysResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_buys(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BucketSale__buysResult> {
    let result = super.tryCall(
      "buys",
      "buys(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BucketSale__buysResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  calculateExitableTokens(_bucketId: BigInt, _buyer: Address): BigInt {
    let result = super.call(
      "calculateExitableTokens",
      "calculateExitableTokens(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_bucketId),
        ethereum.Value.fromAddress(_buyer)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateExitableTokens(
    _bucketId: BigInt,
    _buyer: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateExitableTokens",
      "calculateExitableTokens(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_bucketId),
        ethereum.Value.fromAddress(_buyer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentBucket(): BigInt {
    let result = super.call("currentBucket", "currentBucket():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentBucket(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentBucket",
      "currentBucket():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referredTotal(param0: Address): BigInt {
    let result = super.call(
      "referredTotal",
      "referredTotal(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_referredTotal(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "referredTotal",
      "referredTotal(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referrerReferralRewardPerc(_referrerAddress: Address): BigInt {
    let result = super.call(
      "referrerReferralRewardPerc",
      "referrerReferralRewardPerc(address):(uint256)",
      [ethereum.Value.fromAddress(_referrerAddress)]
    );

    return result[0].toBigInt();
  }

  try_referrerReferralRewardPerc(
    _referrerAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "referrerReferralRewardPerc",
      "referrerReferralRewardPerc(address):(uint256)",
      [ethereum.Value.fromAddress(_referrerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startOfSale(): BigInt {
    let result = super.call("startOfSale", "startOfSale():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startOfSale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startOfSale", "startOfSale():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  termsAndConditions(): string {
    let result = super.call(
      "termsAndConditions",
      "termsAndConditions():(string)",
      []
    );

    return result[0].toString();
  }

  try_termsAndConditions(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "termsAndConditions",
      "termsAndConditions():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenOnSale(): Address {
    let result = super.call("tokenOnSale", "tokenOnSale():(address)", []);

    return result[0].toAddress();
  }

  try_tokenOnSale(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenOnSale", "tokenOnSale():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenSoldFor(): Address {
    let result = super.call("tokenSoldFor", "tokenSoldFor():(address)", []);

    return result[0].toAddress();
  }

  try_tokenSoldFor(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenSoldFor", "tokenSoldFor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalExitedTokens(): BigInt {
    let result = super.call(
      "totalExitedTokens",
      "totalExitedTokens():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalExitedTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalExitedTokens",
      "totalExitedTokens():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _startOfSale(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _bucketPeriod(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _bucketSupply(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _bucketCount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _tokenOnSale(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _tokenSoldFor(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AgreeToTermsAndConditionsListedInThisContractAndEnterSaleCall extends ethereum.Call {
  get inputs(): AgreeToTermsAndConditionsListedInThisContractAndEnterSaleCall__Inputs {
    return new AgreeToTermsAndConditionsListedInThisContractAndEnterSaleCall__Inputs(
      this
    );
  }

  get outputs(): AgreeToTermsAndConditionsListedInThisContractAndEnterSaleCall__Outputs {
    return new AgreeToTermsAndConditionsListedInThisContractAndEnterSaleCall__Outputs(
      this
    );
  }
}

export class AgreeToTermsAndConditionsListedInThisContractAndEnterSaleCall__Inputs {
  _call: AgreeToTermsAndConditionsListedInThisContractAndEnterSaleCall;

  constructor(
    call: AgreeToTermsAndConditionsListedInThisContractAndEnterSaleCall
  ) {
    this._call = call;
  }

  get _buyer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bucketId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _referrer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class AgreeToTermsAndConditionsListedInThisContractAndEnterSaleCall__Outputs {
  _call: AgreeToTermsAndConditionsListedInThisContractAndEnterSaleCall;

  constructor(
    call: AgreeToTermsAndConditionsListedInThisContractAndEnterSaleCall
  ) {
    this._call = call;
  }
}

export class ExitCall extends ethereum.Call {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }

  get _bucketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _buyer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}
